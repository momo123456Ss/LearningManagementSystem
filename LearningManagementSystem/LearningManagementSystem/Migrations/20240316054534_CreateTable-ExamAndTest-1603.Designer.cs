// <auto-generated />
using System;
using LearningManagementSystem.Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LearningManagementSystem.Migrations
{
    [DbContext(typeof(LearningManagementSystemContext))]
    [Migration("20240316054534_CreateTable-ExamAndTest-1603")]
    partial class CreateTableExamAndTest1603
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LearningManagementSystem.Entity.Class", b =>
                {
                    b.Property<Guid>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ClassClosingDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("ClassCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ClassOpeningDay")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Faculty")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Semester")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ClassId");

                    b.HasIndex("Faculty");

                    b.ToTable("Class");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.CloudinaryConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApiSecret")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CloudName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CloudinaryConfiguration");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.ExamAndTest", b =>
                {
                    b.Property<int>("ExamAndTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamAndTestId"), 1L, 1);

                    b.Property<bool?>("Approve")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExamForm")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FileSize")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("FileType")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("FileUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FileViewUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Time")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ExamAndTestId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ExamAndTest");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.Faculty", b =>
                {
                    b.Property<Guid>("FacultyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ContactInformation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("EstablishmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FacultyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FacultyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NumberOfStudents")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfTeacher")
                        .HasColumnType("int");

                    b.HasKey("FacultyId");

                    b.ToTable("Faculty");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.LecturesAndResources", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Approve")
                        .HasColumnType("bit");

                    b.Property<string>("FileName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FileSize")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("FileType")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("FileUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FileViewUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TypeOfDocument")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("LecturesAndResources");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.Lesson", b =>
                {
                    b.Property<int>("LessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LessonId"), 1L, 1);

                    b.Property<string>("LessonTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("SubjectTopicId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("LessonId");

                    b.HasIndex("SubjectTopicId");

                    b.ToTable("Lesson");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.LessonResources", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid?>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("LecturesAndResourcesId")
                        .HasColumnType("int");

                    b.Property<int?>("LessonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("LecturesAndResourcesId");

                    b.HasIndex("LessonId");

                    b.ToTable("LessonResources");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.MailConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("EnableSsl")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<string>("SenderEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SmtpAuth")
                        .HasColumnType("bit");

                    b.Property<string>("SmtpServer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SmtpStartTlsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("UseDefaultCredentials")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("MailConfiguration");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.OtherSubjectInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("OtherSubjectDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("OtherSubjectTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("SubjectId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("OtherSubjectInformation");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.QaAFollowers", b =>
                {
                    b.Property<int>("QaAFollowersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QaAFollowersId"), 1L, 1);

                    b.Property<int>("QaAIdFollow")
                        .HasColumnType("int");

                    b.Property<Guid>("UserIdFollower")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QaAFollowersId");

                    b.HasIndex("QaAIdFollow");

                    b.HasIndex("UserIdFollower");

                    b.ToTable("QaAFollowers");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.QuestionAndAnswer", b =>
                {
                    b.Property<int>("QuestionAndAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionAndAnswerId"), 1L, 1);

                    b.Property<Guid>("ClassIdComment")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LessonIdComment")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfResponses")
                        .HasColumnType("int");

                    b.Property<DateTime?>("QaACreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("QaAInOtherQaA")
                        .HasColumnType("int");

                    b.Property<int?>("QaAReplyQaA")
                        .HasColumnType("int");

                    b.Property<string>("QuestionAndAnswerContent")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("QuestionAndAnswerTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UserIdComment")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("countLike")
                        .HasColumnType("int");

                    b.HasKey("QuestionAndAnswerId");

                    b.HasIndex("ClassIdComment");

                    b.HasIndex("LessonIdComment");

                    b.HasIndex("QaAInOtherQaA");

                    b.HasIndex("QaAReplyQaA");

                    b.HasIndex("UserIdComment");

                    b.ToTable("QuestionAndAnswer");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.Subject", b =>
                {
                    b.Property<Guid>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastRecent")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LecturerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubjectCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SubjectDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SubjectId");

                    b.HasIndex("LecturerId");

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.SubjectAnnouncement", b =>
                {
                    b.Property<int>("SubjectAnnouncementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectAnnouncementId"), 1L, 1);

                    b.Property<Guid>("ClassIdAnnouncement")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SACreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SAInOtherSA")
                        .HasColumnType("int");

                    b.Property<int?>("SAReplySA")
                        .HasColumnType("int");

                    b.Property<string>("SubjectAnnouncementContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectAnnouncementTitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("SubjectIdAnnouncement")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserIdAnnouncement")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SubjectAnnouncementId");

                    b.HasIndex("ClassIdAnnouncement");

                    b.HasIndex("SAInOtherSA");

                    b.HasIndex("SAReplySA");

                    b.HasIndex("SubjectIdAnnouncement");

                    b.HasIndex("UserIdAnnouncement");

                    b.ToTable("SubjectAnnouncement");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.SubjectTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid?>("SubjectId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubjectTopicTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("SubjectTopic");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("IsActived")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LeadershipNotificationWhenInstructorsSaveNewExamQuestionsIntoTheSystem")
                        .HasColumnType("bit");

                    b.Property<bool>("LeadershipNotificationWhenThereAreChangesInSubjectContent")
                        .HasColumnType("bit");

                    b.Property<bool>("LeadershipNotificationWhenThereAreChangesInSubjectManagement")
                        .HasColumnType("bit");

                    b.Property<bool>("LeadershipNotificationWhenYouConfirmOrCancelTheTest")
                        .HasColumnType("bit");

                    b.Property<bool>("LeadershipNotificationWhenYouCreateOrChangeNamesOrDeletePrivateFiles")
                        .HasColumnType("bit");

                    b.Property<bool>("LeadershipNotificationWhenYouMakeChangesInTheRoleList")
                        .HasColumnType("bit");

                    b.Property<bool>("LeadershipNotificationWhenYouMakeChangesInTheUserList")
                        .HasColumnType("bit");

                    b.Property<bool>("NotificationWhenChangingPassword")
                        .HasColumnType("bit");

                    b.Property<bool>("NotificationWhenUpdatingAccount")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("StudentNotificationsWhenInstructorsCreateSubjectAnnouncements")
                        .HasColumnType("bit");

                    b.Property<bool>("StudentNotificationsWhenSomeoneCommentsOnASubjectAnnouncement")
                        .HasColumnType("bit");

                    b.Property<bool>("StudentNotificationsWhenSomeoneInteractsWithYourQuestionOrAnswer")
                        .HasColumnType("bit");

                    b.Property<bool>("StudentNotificationsWhenTheLecturerAsksAQuestionInTheSubject")
                        .HasColumnType("bit");

                    b.Property<bool>("TeacherNotificationWhenSomeoneAsksAQuestionInTheCourseOrInteractsWithYourAnswer")
                        .HasColumnType("bit");

                    b.Property<bool>("TeacherNotificationWhenSomeoneCommentsOnTheCourseAnnouncement")
                        .HasColumnType("bit");

                    b.Property<bool>("TeacherNotificationWhenYouAddDocumentsOrUpdateDocumentsAndAssignDocumentsToTeachingClasses")
                        .HasColumnType("bit");

                    b.Property<bool>("TeacherNotificationWhenYouCreateOrChangeTheNameOrDeleteALectureAndMoveTheLectureToTheSubjectTopic")
                        .HasColumnType("bit");

                    b.Property<bool>("TeacherNotificationWhenYouUpdateTheTestBankWhenUploadOrCreateNewOrEditAndDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("TeacherNotificationWhenYouUploadOrCreateNewTestQuestionsAndRenameTestQuestions")
                        .HasColumnType("bit");

                    b.Property<bool>("TeacherNotifyWhenYouCreateOrChangeTheNameOrDeleteAResourcesAndMoveTheResourcesToTheSubjectTopic")
                        .HasColumnType("bit");

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("UserCode")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.UserBelongToFaculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsHeadOfDepartment")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBelongToFaculty");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.UserClassSubject", b =>
                {
                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastRecent")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Mark")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "ClassId", "SubjectId");

                    b.HasIndex("ClassId");

                    b.HasIndex("SubjectId");

                    b.ToTable("UserClassSubject");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.UserNotifications", b =>
                {
                    b.Property<int>("UserNotificationsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserNotificationsId"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("QaAFollowersId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionAndAnswerId")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectAnnouncementId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserIdNotifications")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserNotificationsContent")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserNotificationsId");

                    b.HasIndex("QaAFollowersId");

                    b.HasIndex("QuestionAndAnswerId");

                    b.HasIndex("SubjectAnnouncementId");

                    b.HasIndex("UserIdNotifications");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.UserRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("DecentralizationCreateNew")
                        .HasColumnType("bit");

                    b.Property<bool>("DecentralizationDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("DecentralizationEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("DecentralizationSee")
                        .HasColumnType("bit");

                    b.Property<string>("Describe")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("ExamsAndTestsAcceptance")
                        .HasColumnType("bit");

                    b.Property<bool>("ExamsAndTestsCreateNew")
                        .HasColumnType("bit");

                    b.Property<bool>("ExamsAndTestsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("ExamsAndTestsDownload")
                        .HasColumnType("bit");

                    b.Property<bool>("ExamsAndTestsEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("ExamsAndTestsSee")
                        .HasColumnType("bit");

                    b.Property<bool>("LecturesAndResourcesAddToSubject")
                        .HasColumnType("bit");

                    b.Property<bool>("LecturesAndResourcesCreateNew")
                        .HasColumnType("bit");

                    b.Property<bool>("LecturesAndResourcesDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("LecturesAndResourcesDownload")
                        .HasColumnType("bit");

                    b.Property<bool>("LecturesAndResourcesEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("LecturesAndResourcesSee")
                        .HasColumnType("bit");

                    b.Property<bool>("NotificationDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("NotificationEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("NotificationSee")
                        .HasColumnType("bit");

                    b.Property<bool>("NotificationSettings")
                        .HasColumnType("bit");

                    b.Property<bool>("PrivateFilesCreateNew")
                        .HasColumnType("bit");

                    b.Property<bool>("PrivateFilesDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("PrivateFilesDownload")
                        .HasColumnType("bit");

                    b.Property<bool>("PrivateFilesEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("PrivateFilesSee")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("SubjectEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("SubjectSee")
                        .HasColumnType("bit");

                    b.Property<bool>("UserAccountEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("UserAccountSee")
                        .HasColumnType("bit");

                    b.HasKey("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.Class", b =>
                {
                    b.HasOne("LearningManagementSystem.Entity.Faculty", "FacultyNavigation")
                        .WithMany("Classes")
                        .HasForeignKey("Faculty");

                    b.Navigation("FacultyNavigation");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.ExamAndTest", b =>
                {
                    b.HasOne("LearningManagementSystem.Entity.Faculty", "FacultyNavigation")
                        .WithMany("ExamAndTests")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearningManagementSystem.Entity.Subject", "SubjectNavigation")
                        .WithMany("ExamAndTests")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FacultyNavigation");

                    b.Navigation("SubjectNavigation");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.LecturesAndResources", b =>
                {
                    b.HasOne("LearningManagementSystem.Entity.Subject", "SubjectNavigation")
                        .WithMany("LecturesAndResourcesL")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubjectNavigation");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.Lesson", b =>
                {
                    b.HasOne("LearningManagementSystem.Entity.SubjectTopic", "SubjectTopicNavigation")
                        .WithMany("Lessons")
                        .HasForeignKey("SubjectTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubjectTopicNavigation");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.LessonResources", b =>
                {
                    b.HasOne("LearningManagementSystem.Entity.Class", "ClassNavigation")
                        .WithMany()
                        .HasForeignKey("ClassId");

                    b.HasOne("LearningManagementSystem.Entity.LecturesAndResources", "LecturesAndResourcesNavigation")
                        .WithMany("LessonResourcess")
                        .HasForeignKey("LecturesAndResourcesId");

                    b.HasOne("LearningManagementSystem.Entity.Lesson", "LessonNavigation")
                        .WithMany("LessonResourcess")
                        .HasForeignKey("LessonId");

                    b.Navigation("ClassNavigation");

                    b.Navigation("LecturesAndResourcesNavigation");

                    b.Navigation("LessonNavigation");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.OtherSubjectInformation", b =>
                {
                    b.HasOne("LearningManagementSystem.Entity.Subject", "SubjectNavigation")
                        .WithMany("OtherSubjectInformations")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubjectNavigation");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.QaAFollowers", b =>
                {
                    b.HasOne("LearningManagementSystem.Entity.QuestionAndAnswer", "QuestionAndAnswerNavigation")
                        .WithMany("QaAFollowerss")
                        .HasForeignKey("QaAIdFollow")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearningManagementSystem.Entity.User", "UserIdFollowerNavigation")
                        .WithMany("QaAFollowerss")
                        .HasForeignKey("UserIdFollower")
                        .IsRequired();

                    b.Navigation("QuestionAndAnswerNavigation");

                    b.Navigation("UserIdFollowerNavigation");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.QuestionAndAnswer", b =>
                {
                    b.HasOne("LearningManagementSystem.Entity.Class", "ClassNavigation")
                        .WithMany("QuestionAndAnswers")
                        .HasForeignKey("ClassIdComment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearningManagementSystem.Entity.Lesson", "LessonNavigation")
                        .WithMany("QuestionAndAnswers")
                        .HasForeignKey("LessonIdComment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearningManagementSystem.Entity.QuestionAndAnswer", "QaAInOtherQaANavigation")
                        .WithMany("QaAInOtherQaAs")
                        .HasForeignKey("QaAInOtherQaA")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LearningManagementSystem.Entity.QuestionAndAnswer", "QaAReplyQaANavigation")
                        .WithMany("QaAReplyQaAs")
                        .HasForeignKey("QaAReplyQaA")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LearningManagementSystem.Entity.User", "UserNavigation")
                        .WithMany("QuestionAndAnswers")
                        .HasForeignKey("UserIdComment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassNavigation");

                    b.Navigation("LessonNavigation");

                    b.Navigation("QaAInOtherQaANavigation");

                    b.Navigation("QaAReplyQaANavigation");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.RefreshToken", b =>
                {
                    b.HasOne("LearningManagementSystem.Entity.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.Subject", b =>
                {
                    b.HasOne("LearningManagementSystem.Entity.User", "UserNavigation")
                        .WithMany("Subjects")
                        .HasForeignKey("LecturerId");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.SubjectAnnouncement", b =>
                {
                    b.HasOne("LearningManagementSystem.Entity.Class", "ClassAnnouncementNavigation")
                        .WithMany("SubjectAnnouncements")
                        .HasForeignKey("ClassIdAnnouncement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearningManagementSystem.Entity.SubjectAnnouncement", "SAInOtherSANavigation")
                        .WithMany("SAInOtherSAs")
                        .HasForeignKey("SAInOtherSA")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LearningManagementSystem.Entity.SubjectAnnouncement", "SAReplySANavigation")
                        .WithMany("SAReplySAs")
                        .HasForeignKey("SAReplySA")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LearningManagementSystem.Entity.Subject", "SubjectAnnouncementNavigation")
                        .WithMany()
                        .HasForeignKey("SubjectIdAnnouncement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearningManagementSystem.Entity.User", "UserAnnouncementNavigation")
                        .WithMany("SubjectAnnouncements")
                        .HasForeignKey("UserIdAnnouncement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassAnnouncementNavigation");

                    b.Navigation("SAInOtherSANavigation");

                    b.Navigation("SAReplySANavigation");

                    b.Navigation("SubjectAnnouncementNavigation");

                    b.Navigation("UserAnnouncementNavigation");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.SubjectTopic", b =>
                {
                    b.HasOne("LearningManagementSystem.Entity.Subject", "SubjectIdNavigation")
                        .WithMany("SubjectTopics")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubjectIdNavigation");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.User", b =>
                {
                    b.HasOne("LearningManagementSystem.Entity.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.UserBelongToFaculty", b =>
                {
                    b.HasOne("LearningManagementSystem.Entity.Faculty", "Faculty")
                        .WithMany("UserBelongToFacultys")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearningManagementSystem.Entity.User", "User")
                        .WithMany("UserBelongToFacultys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.UserClassSubject", b =>
                {
                    b.HasOne("LearningManagementSystem.Entity.Class", "ClassNavigation")
                        .WithMany("UserClassSubjects")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearningManagementSystem.Entity.Subject", "SubjectNavigation")
                        .WithMany("UserClassSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearningManagementSystem.Entity.User", "UserNavigation")
                        .WithMany("UserClassSubjects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassNavigation");

                    b.Navigation("SubjectNavigation");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.UserNotifications", b =>
                {
                    b.HasOne("LearningManagementSystem.Entity.QaAFollowers", "QaAFollowersNavigation")
                        .WithMany()
                        .HasForeignKey("QaAFollowersId");

                    b.HasOne("LearningManagementSystem.Entity.QuestionAndAnswer", "QuestionAndAnswerNavigation")
                        .WithMany()
                        .HasForeignKey("QuestionAndAnswerId");

                    b.HasOne("LearningManagementSystem.Entity.SubjectAnnouncement", "SubjectAnnouncementNavigation")
                        .WithMany()
                        .HasForeignKey("SubjectAnnouncementId");

                    b.HasOne("LearningManagementSystem.Entity.User", "UserNotificationsNavigation")
                        .WithMany()
                        .HasForeignKey("UserIdNotifications")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QaAFollowersNavigation");

                    b.Navigation("QuestionAndAnswerNavigation");

                    b.Navigation("SubjectAnnouncementNavigation");

                    b.Navigation("UserNotificationsNavigation");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.Class", b =>
                {
                    b.Navigation("QuestionAndAnswers");

                    b.Navigation("SubjectAnnouncements");

                    b.Navigation("UserClassSubjects");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.Faculty", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("ExamAndTests");

                    b.Navigation("UserBelongToFacultys");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.LecturesAndResources", b =>
                {
                    b.Navigation("LessonResourcess");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.Lesson", b =>
                {
                    b.Navigation("LessonResourcess");

                    b.Navigation("QuestionAndAnswers");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.QuestionAndAnswer", b =>
                {
                    b.Navigation("QaAFollowerss");

                    b.Navigation("QaAInOtherQaAs");

                    b.Navigation("QaAReplyQaAs");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.Subject", b =>
                {
                    b.Navigation("ExamAndTests");

                    b.Navigation("LecturesAndResourcesL");

                    b.Navigation("OtherSubjectInformations");

                    b.Navigation("SubjectTopics");

                    b.Navigation("UserClassSubjects");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.SubjectAnnouncement", b =>
                {
                    b.Navigation("SAInOtherSAs");

                    b.Navigation("SAReplySAs");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.SubjectTopic", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.User", b =>
                {
                    b.Navigation("QaAFollowerss");

                    b.Navigation("QuestionAndAnswers");

                    b.Navigation("RefreshTokens");

                    b.Navigation("SubjectAnnouncements");

                    b.Navigation("Subjects");

                    b.Navigation("UserBelongToFacultys");

                    b.Navigation("UserClassSubjects");
                });

            modelBuilder.Entity("LearningManagementSystem.Entity.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
